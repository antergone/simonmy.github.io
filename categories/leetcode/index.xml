<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>LeetCode - 分类 - Simon (Yu Ma)</title><link>https://simonmy.com/categories/leetcode/</link><description>LeetCode - 分类 - Simon (Yu Ma)</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 21 May 2022 02:30:00 +0800</lastBuildDate><atom:link href="https://simonmy.com/categories/leetcode/" rel="self" type="application/rss+xml"/><item><title>3. Longest Substring Without Repeating Characters</title><link>https://simonmy.com/posts/leetcode/longest-substring-without-repeating-characters/</link><pubDate>Sat, 21 May 2022 02:30:00 +0800</pubDate><author>作者</author><guid>https://simonmy.com/posts/leetcode/longest-substring-without-repeating-characters/</guid><description>https://leetcode.com/problems/longest-substring-without-repeating-characters/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 impl Solution { pub fn length_of_longest_substring(s: String) -&amp;gt; i32 { use std::cmp::max; use std::collections::HashMap; let mut m = HashMap::new(); let mut ans = 0; let mut before = -1; let mut current = 0; for c in s.</description></item><item><title>206. Reverse Linked List</title><link>https://simonmy.com/posts/leetcode/reverse-linked-list/</link><pubDate>Fri, 20 May 2022 14:30:00 +0800</pubDate><author>作者</author><guid>https://simonmy.com/posts/leetcode/reverse-linked-list/</guid><description><![CDATA[https://leetcode.com/problems/reverse-linked-list/
Iterative 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 use crate::data_struct::linked_list::ListNode; impl Solution { pub fn reverse_list(head: Option&lt;Box&lt;ListNode&gt;&gt;) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; { let mut curr = head; let mut next = None; while let Some(mut inner) = curr { curr = inner.next.take(); inner.next = next; next = Some(inner); } next } } pub struct Solution; #[cfg(test)] mod tests { use crate::data_struct::linked_list::to_list; use crate::solutions::p0206_reverse_linked_list::Solution; #[test] fn test() { let l1 = vec!]]></description></item><item><title>2. Add Two Numbers</title><link>https://simonmy.com/posts/leetcode/add-two-numbers/</link><pubDate>Fri, 20 May 2022 14:10:00 +0800</pubDate><author>作者</author><guid>https://simonmy.com/posts/leetcode/add-two-numbers/</guid><description><![CDATA[https://leetcode.com/problems/add-two-numbers/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 use crate::data_struct::linked_list::ListNode; impl Solution { pub fn add_two_numbers( l1: Option&lt;Box&lt;ListNode&gt;&gt;, l2: Option&lt;Box&lt;ListNode&gt;&gt;, ) -&gt; Option&lt;Box&lt;ListNode&gt;&gt; { let mut dummy = Box::new(ListNode::new(0)); let mut l1 = l1.]]></description></item><item><title>1. Two Sum</title><link>https://simonmy.com/posts/leetcode/two-sum/</link><pubDate>Sun, 08 May 2022 18:00:00 +0800</pubDate><author>作者</author><guid>https://simonmy.com/posts/leetcode/two-sum/</guid><description><![CDATA[LeetCode: https://leetcode.com/problems/two-sum/
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 impl Solution { pub fn two_sum(nums: Vec&lt;i32&gt;, target: i32) -&gt; Vec&lt;i32&gt; { let mut result_map: HashMap&lt;i32, i32&gt; = HashMap::new(); for (idx, val) in nums.iter().enumerate() { match result_map.get(&amp;(target - *val)) { Some(&amp;idx2) =&gt; return vec![idx2, idx as i32], None =&gt; result_map.insert(*val, idx as i32), }; } return vec!]]></description></item></channel></rss>